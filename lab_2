#include <iostream>
#include <string>
#include <utility>
#include <fstream>
#include <Windows.h>

using namespace std;

//Обьявление структуры
struct car {

	string brand;
	string model;
	string complect;
	string segment;
	string body;
	double volume;
	double power;
	int year;
	double price;
	double koef;
};

// Глобальные переменные
int N;				// Количество элементов коллекции
car* collection;	// Указатель на коллекцию элементов 
string* branded;	// Указатель на массив марок авто

// Чтение информации о машинах
car read_car(ifstream& file) {

	car ncar;

	getline(file, ncar.brand);
	getline(file, ncar.model);
	getline(file, ncar.complect);
	getline(file, ncar.segment);
	getline(file, ncar.body);
	file >> ncar.volume;
	file >> ncar.power;
	file >> ncar.year;
	file >> ncar.price;
	file.get();

	ncar.koef = ncar.power / ncar.price;

	return ncar;
}

// Отображение информации о автомобиле
void display_car(car ncar) {
	cout << "Марка автомобиля: " << ncar.brand << endl
		<< "Название модели: " << ncar.model << endl
		<< "Название комплектации: " << ncar.complect << endl
		<< "Рыночный сегмент: " << ncar.segment << endl
		<< "Тип автомобильного кузова: " << ncar.body << endl
		<< "Объем двигателя в литрах: " << ncar.volume << endl
		<< "Мощность двигателя в л.с. : " << ncar.power << endl
		<< "Год выпуска: " << ncar.year << endl
		<< "Стоимость в рублях: " << int(ncar.price) << endl << "Отношение Мощности двигателя к Стоимости: " << ncar.koef << endl << "----------------------" << endl;
}

// Нахождение оптимального коэфициента автомобиля и его отображение
void optimal_car(car acollection[], int n) {
	double max = acollection[0].koef;
	int indexOptimalCar = 0;
	for (int i = 0; i < n; i++) {
		if (acollection[i].koef > max) {
			max = acollection[i].koef;
			indexOptimalCar = i;
		}
	}
	cout << "Наибольшее отношение Мощности двигателя к Стоимости имеет автомобиль со следущими характеристиками: " << endl;
	display_car(acollection[indexOptimalCar]);
}

// Параметрическая функция сортировки массива (удаление дубликатов)
int arrayUnique(string* ar, int size) // функция, определяющая элементы массива в единственном экземпляре
{
	for (int counter1 = 0; counter1 < size; counter1++)
	{
		for (int counter2 = counter1 + 1; counter2 < size; counter2++)
		{
			if (ar[counter1] == ar[counter2]) // если найден одинаковый элемент
			{
				for (int counter_shift = counter2; counter_shift < size - 1; counter_shift++)
				{
					// выполнить сдвиг всех остальных элементов массива на -1, начиная со следующего элемента, после найденного дубля
					ar[counter_shift] = ar[counter_shift + 1];
				}
				size -= 1; // уменьшить размер массива на 1

				if (ar[counter1] == ar[counter2]) // если следующий элемент - дубль
				{
					counter2--; // выполнить переход на предыдущий элемент     
				}
			}
		}
	}
	return size;
}


// Функция вывода комплектаций автомобиля введеной марки
void find_car(car acollection[], int n) {

	//Ввод модели с клавиатуры
	int size = n;
	branded = new string[size];

	for (int i = 0; i < size; i++) {
		branded[i] = acollection[i].brand;
	}

	cout << "Модели в ассортименте:" << endl;
	for (int counter1 = 0; counter1 < arrayUnique(branded, n)/*вызов функции отбора значений*/; counter1++)
	{
		cout << branded[counter1] << endl; // печать элементов массива
	}

	delete[] branded;

	cout << "Введите название модели: ";
	string search;
	cin >> search;

	//Поиск совпадений по бренду
	
	int p = 0;
	for (int i = 0; i < n; i++) {
		if (search == acollection[i].brand) {
			p++;
		}
	}

	if (p == 0) {
		cout << "Автомобилей по данному запросу не найдено, неверно введена марка автомобиля, попробуйте ещё раз" << endl;
		return;
	}

	car* price_array = new car[p];
	int p1 = 0;
	for (int i = 0; i < n; i++) {
		if (search == acollection[i].brand) {
			price_array[p1] = acollection[i];
			p1++;
		}
	}

	for (int startIndex = 0; startIndex < p1 - 1; startIndex++) {
		int smallestIndex = startIndex;

		for (int currentIndex = startIndex + 1; currentIndex < p1; currentIndex++) {
			if ((price_array[currentIndex]).price < (price_array[smallestIndex]).price)
				smallestIndex = currentIndex;
		}

		std::swap(price_array[startIndex], price_array[smallestIndex]);
	}

	cout << "Доступные комплектации данной модели: " << endl;

	for (int i = 0; i < p1; i++) {
		cout << "(*) " << price_array[i].complect << endl;
		cout << "Цена данной комлектации: " << int(price_array[i].price) << endl << "-----------------" << endl;
	}

	delete[] price_array;
}

int main()
{
	setlocale(LC_ALL, "ru");

	// Поточный ввод информации из файла
	ifstream infile; 
	infile.open("info.txt");
	infile >> N;
	infile.get();

	collection = new car[N];
	for (int i = 0; i < N; i++) {
		collection[i] = read_car(infile);
	}
	infile.close();

	// Настройка интерфейса взаимодействия пользователя и программы
	cout << "(*) Чтобы просмотреть информацию о машинах и выбрать оптимальную нажмите (1)" << endl << "(*) Чтобы узнать все комплектации по марке автомобиля нажмите (2)" << endl << "(*) Чтобы закрырыть программу нажмите (0)" << endl;

	int flag;
	cin >> flag;

	if (flag == 1) {

		for (int i = 0; i < N; i++) {
			display_car(collection[i]);
		}

		optimal_car(collection, N);
	}
	if (flag == 2)
		find_car(collection, N);

	if (flag == 0)
		return 0;

	delete[] collection;

	system("pause");
	return 0;
}
